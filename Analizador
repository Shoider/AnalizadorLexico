%option noyywrap
%option yylineno

/* LIBRERIAS    */
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
%}

/* CARACTERES   */

NUMERO			[0-9]
LETRA           [a-zA-Z]

/* SIMBOLOS */
COMENTARIO      [--]
I_COMENTARIO    ["*/"]
F_COMENTARIO    ["*/"]
GUION           [_-]
PUNTO           ["."]
COMA            [","]
P_COMA          [";"]
D_PUNTOS        [":"]

/* PARENTESIS */
PARENTESIS_I    ["("]
PARENTESIS_F    [")"]
LLAVE_I         ["{"]
LLAVE_F         ["}"]
CORCHETE_I      "["
CORCHETE_F      "]"

/* COMPUESTOS  */
ID      {LETRA}({LETRA}|{NUMERO}|{GUION})*
INT     (-?[1-9]{NUMERO}*)|0
FLOAT   (-?[1-9]{NUMERO}*){PUNTO}{NUMERO}*
CHAR    {LETRA}|{LETRA}*

/* EXTRAS   */
OPERADOR_LOG     ["!"|"||"|"&&"]
PUNTEROS        ["->"|"*"]
CADENA          \"[^\n]*\"

/* OPERADORES   */
OP_IGUALDAD     "=="
OP_MENOR        ["<"]
OP_MAYOR        [">"]
OP_MENOROIGUAL  "<="
OP_MAYOROIGUAL  ">="
OP_DIFERENTE    "!="
OP_NEGACION     ["!"]

OP_ASIGNACION   ["="]

OP_SUMA             ["+"]
OP_RESTA            ["-"]
OP_MULTIPLICACION   ["*"]
OP_DIVICION         ["/"]
OP_MODULO           ["%"]

OP_ASIG_SUMA            "+="
OP_ASIG_RESTA           "-="
OP_ASIG_MULTIPLICACION  "*="
OP_ASIG_DIVICION        "/="
OP_ASIG_MODULO          "%="

OP_INCREMENTO   "++"
OP_DECREMENTO   "--"

FORMAR_E        %([di]|u|[xX]|f|lf|[eE]|[gG]|c|s)    

%%  INICIAN REGLAS

"main"              { printf("main "); }
"auto"              { printf("auto "); }
"double"            { printf("double "); }
"int"               { printf("int "); }
"struct"            { printf("struct "); }
"break"             { printf("break "); }
"else"              { printf("else "); }
"long"              { printf("long "); }
"switch"            { printf("switch "); }
"case"              { printf("case "); }
"enum"              { printf("enum "); }
"register"          { printf("register "); }
"typedef"           { printf("typedef "); }
"char"              { printf("char "); }
"extern"            { printf("extern "); }
"return"            { printf("return "); }
"union"             { printf("union "); }
"const"             { printf("const "); }
"float"             { printf("float "); }
"short"             { printf("short "); }
"unsigned"          { printf("unsigned "); }
"continue"          { printf("continue "); }
"for"               { printf("for "); }
"signed"            { printf("signed "); }
"void"              { printf("void "); }
"default"           { printf("default "); }
"goto"              { printf("goto "); }
"sizeof"            { printf("sizeof "); }
"volatile"          { printf("volatile "); }
"do"                { printf("do "); }
"if"                { printf("if "); }
"static"            { printf("static "); }
"while"             { printf("while "); }


"#include <"{LETRA}{LETRA}*{PUNTO}"h>"  { printf("LIBRERIA(%s) \n", yytext); }


{INT}               { printf("NUMERO(%s) ", yytext); }
{FLOAT}             { printf("NUMEROFLOAT(%s) ", yytext); }
{CHAR}              { printf("CARACTER(%s) ", yytext); }
{ID}                { printf("ID(%s) ", yytext); }
{CADENA}            { printf("CADENA(%s) ", yytext); }

{COMA}              { printf("COMA "); }
{PUNTO}             { printf("PUNTO "); }
{D_PUNTOS}          { printf("DOSPUNTOS "); }
{P_COMA}            { printf("FIN_LINEA \n", yytext); }

{PUNTEROS}          { printf("PUNTERO(%s) ", yytext); }
{OPERADOR_LOG}      { printf("LOGICO(%s) ", yytext); }

{I_COMENTARIO}|{F_COMENTARIO}   { printf("COMENTARIO(%s) ", yytext); } 
{COMENTARIO}                    { printf("COMENTARIO "); }


{OP_ASIGNACION}     { printf("ASIGNACION "); }
{OP_IGUALDAD}       { printf("IGUALDAD "); }
{OP_MENOR}          { printf("MENOR "); }
{OP_MAYOR}          { printf("MAYOR "); }
{OP_MENOROIGUAL}    { printf("MENORIGUAL "); }
{OP_MENOROIGUAL}    { printf("MAYORIGUAL; "); }
{OP_DIFERENTE}      { printf("DIFERENTE "); }
{OP_NEGACION}       { printf("NEGACION "); }

{OP_SUMA}           { printf("SUMA "); }
{OP_RESTA}          { printf("RESTA "); }
{OP_MULTIPLICACION} { printf("MULTIPLICACION "); }
{OP_DIVICION}       { printf("DIVICION "); }
{OP_MODULO}         { printf("MODULO "); }

{OP_ASIG_SUMA}              { printf("SUMAASIG "); }
{OP_ASIG_RESTA}             { printf("RESTAASIG "); }
{OP_ASIG_MULTIPLICACION}    { printf("MULTIPLICACIONASIG "); }
{OP_ASIG_DIVICION}          { printf("DIVICIONASIG "); }
{OP_ASIG_MODULO}            { printf("MODULOASIG "); }

{OP_INCREMENTO}     { printf("INCREMENTO "); }
{OP_DECREMENTO}     { printf("DECREMENTO "); }


{LLAVE_I}|{LLAVE_F}             { printf("LLAVE(%s) \n", yytext); }
{PARENTESIS_I}|{PARENTESIS_F}   { printf("PARENTESIS(%s) ", yytext); }
{CORCHETE_I}|{CORCHETE_F}       { printf("CORCHETE(%s) ", yytext); }


[\n]+                // Ignorar saltos de l√≠nea
[ \t]+              { printf(" "); } // Reemplazar espacios y tabulaciones por un espacio en blanco
.                   { printf("ERROR: CARACTER DESCONOCIDO (%s) ", yytext); }

%% PROGRAMA EN C

int main(int argc, char *argv[]) {      // ARGUMENTOS PARA LECTURA
    
    // SE INTENTA ABRIR EL ARCHIVO 
    if((yyin = fopen(argv[1], "rt")) == NULL){
        // NO SE ENCONTRO EL ARCHIVO
        printf("\nNO SE PUDO ABRIR EL ARCHIVO: %s\n", argv[1]);
        return 1;
    }
    else{
        // SI SE ENCONTRO EL ARCHIVO
        printf("\nSE ABRIO CORRECTAMENTE EL ARCHIVO: %s\n", argv[1]);
        
        // INICIA LECTURA CON FLEX
        yylex();
    }

    // SE FINALIZA LA LECTURA
    printf("\nFINALIZO LA LECTURA DE: %s\n\n", argv[1]);

    // CERRAMOS EL ARCHIVO
    fclose(yyin);

    return 0;
}